import os
import pandas
from base import CalculationHandler
from WhiskersTableHandler import WhiskersTableHandler

class TacHandler(CalculationHandler):
    _db_field_path = 'tac_filename'
    _name = 'tac'
    
    def calculate(self, **kwargs):
        pass
    
    def set_manual_params_if_needed(self, **kwargs):
        pass

class AllEdgesHandler(CalculationHandler):
    """Handler for all_edges. Uses numpy.load"""
    _db_field_path = 'all_edges_filename'
    _name = 'all_edges'
    
    def load_data(self):
        filename = self.get_path
        try:
            data = np.load(filename)
        except IOError:
            raise IOError("no all_edges found at %s" % filename)
        return data

class EdgeSummaryHandler(CalculationHandler):
    _db_field_path = 'edge_summary_filename'
    _name = 'edge_summary'

class MonitorVideoHandler(CalculationHandler):
    """Handler for a monitor video generated by WhiskiWrap trace.
    
    Unlike other handlers, this data is a side effect of trace, so
    this would be set by another calculation.
    
    load_data is not implemented
    """
    _db_field_path = 'monitor_video'
    _name = 'monitor_video'
    
    # Override because it's not just _name
    @property
    def new_path(self):
        return self.video_session.name + '.mkv'

## Handlers for data that haven't been incorporated into the database yet
# Need to do this, so that we can easily check which have been generated
# For now we hard-code the path
class CalculationHandlerWithoutDb(CalculationHandler):
    """Overload for data not in db
    
    """
    @property
    def get_path(self):
        """Assumes self.new_path is the name, checks if it exists, returns

        Raises IOError if the file doesn't exist
        """
        full_filename = os.path.join(self.video_session.session_path,
            self.new_path)
        if not os.path.exists(full_filename):
            raise IOError("file does not exist: %s" % full_filename)
        return full_filename
    
    def set_path(self):
        raise NotImplementedError(
            "set_path not available because this calculation is not in the db")
    
class MaskedWhiskerEndsHandler(CalculationHandlerWithoutDb):
    """Whisker ends after follicle mask"""
    _name = 'masked_whisker_ends'
    
    # Override because it's not just _name
    @property
    def new_path(self):
        return 'mwe'

class ClusteredTacHandler(CalculationHandlerWithoutDb):
    """Tac after clustering"""
    _name = 'clustered_tac'

class ColorizedWhiskerEndsHandler(CalculationHandlerWithoutDb):
    """Whisker ends after colorizing"""
    _name = 'colorized_whisker_ends'
    
class ContactsSummaryHandler(CalculationHandlerWithoutDb):
    """Contacts summmary"""
    _name = 'contacts_summary'

class VideoTrackedWhiskersHandler(CalculationHandlerWithoutDb):
    """Tracked whiskers video. Side effect of trace"""
    _name = 'video_tracked_whiskers'

    # Override because it's not just _name
    @property
    def new_path(self):
        return self.video_session.name + '.tracked_whiskers.mkv'
    
class VideoColorizedWhiskersHandler(CalculationHandlerWithoutDb):
    """Tracked whiskers video. Side effect of colorizing"""
    _name = 'video_colorized_whiskers'
    
    # Override because it's not just _name
    @property
    def new_path(self):
        return self.video_session.name + '_colorized_video.mp4'

class NeuralPathJoiner(object):
    def __init__(self, neural_session, root_directory=None):
        # Figure out which root directory we're using
        if root_directory is None:
            # Try each root directory in turn
            for try_root_dir in neural_root_directory_search_list:
                self._root_directory = try_root_dir
                self._session_directory = os.path.join(self._root_directory,
                    neural_session._field_name)
                
                if os.path.exists(self._session_directory):
                    break
        else:
            # Use the requested root directory
            self._root_directory = try_root_dir
            self._session_directory = os.path.join(self._root_directory,
                neural_session._field_name)            
        
        # Ensure we found the session
        if not os.path.exists(self._session_directory):
            raise IOError("cannot find session directory at %s" %
                self._session_directory)
        
        self._neural_session = neural_session
        self._neural_session_name = neural_session.name
    
    @property
    def session(self):
        return self._session_directory
    
    @property
    def sort(self):
        return os.path.join(self._session_directory, 
            self._neural_session.sort_name)
    
    @property
    def kwik(self):
        return os.path.join(self.sort, self._neural_session._field_kwik_filename)

    @property
    def kwx(self):
        return os.path.join(self.sort, self._neural_session._field_kwx_filename)